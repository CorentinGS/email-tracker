// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tracker.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getTrackerByUUID = `-- name: GetTrackerByUUID :one
SELECT tracker_id, open_date, email_uuid, ip_address FROM tracker WHERE email_uuid = $1
`

func (q *Queries) GetTrackerByUUID(ctx context.Context, emailUuid uuid.UUID) (Tracker, error) {
	row := q.db.QueryRow(ctx, getTrackerByUUID, emailUuid)
	var i Tracker
	err := row.Scan(
		&i.TrackerID,
		&i.OpenDate,
		&i.EmailUuid,
		&i.IpAddress,
	)
	return i, err
}

const getTrackers = `-- name: GetTrackers :many
SELECT tracker_id, open_date, email_uuid, ip_address FROM tracker
`

func (q *Queries) GetTrackers(ctx context.Context) ([]Tracker, error) {
	rows, err := q.db.Query(ctx, getTrackers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tracker
	for rows.Next() {
		var i Tracker
		if err := rows.Scan(
			&i.TrackerID,
			&i.OpenDate,
			&i.EmailUuid,
			&i.IpAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrackersWithPagination = `-- name: GetTrackersWithPagination :many
SELECT tracker_id, open_date, email_uuid, ip_address FROM tracker ORDER BY open_date DESC LIMIT $1 OFFSET $2
`

type GetTrackersWithPaginationParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetTrackersWithPagination(ctx context.Context, arg GetTrackersWithPaginationParams) ([]Tracker, error) {
	rows, err := q.db.Query(ctx, getTrackersWithPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tracker
	for rows.Next() {
		var i Tracker
		if err := rows.Scan(
			&i.TrackerID,
			&i.OpenDate,
			&i.EmailUuid,
			&i.IpAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTracker = `-- name: InsertTracker :one
INSERT INTO tracker (email_uuid, ip_address) VALUES ($1, $2) RETURNING tracker_id, open_date, email_uuid, ip_address
`

type InsertTrackerParams struct {
	EmailUuid uuid.UUID
	IpAddress *string
}

func (q *Queries) InsertTracker(ctx context.Context, arg InsertTrackerParams) (Tracker, error) {
	row := q.db.QueryRow(ctx, insertTracker, arg.EmailUuid, arg.IpAddress)
	var i Tracker
	err := row.Scan(
		&i.TrackerID,
		&i.OpenDate,
		&i.EmailUuid,
		&i.IpAddress,
	)
	return i, err
}
